# roles/k3s_dev_environment/tasks/01_install_tools.yml
- name: Check if runc is installed
  ansible.builtin.stat:
    path: "{{ k3s_dev_environment_local_bin_path }}/runc"
  register: runc_stat

- name: Download and install runc
  vars:
    runc_version: "v1.1.13" # Check for the latest stable runc release on GitHub
  when: not runc_stat.stat.exists or ansible_check_mode
  block:
    - name: Download runc binary (amd64)
      ansible.builtin.get_url:
        url: "https://github.com/opencontainers/runc/releases/download/{{ runc_version }}/runc.amd64"
        dest: "{{ k3s_dev_environment_local_bin_path }}/runc" # Installs directly, ensure path is correct
        mode: '0755'
      register: runc_download
    - name: Ensure runc is executable (redundant if get_url mode is 0755, but good check)
      ansible.builtin.file:
        path: "{{ k3s_dev_environment_local_bin_path }}/runc"
        mode: '0755'
      when: runc_download.changed
- name: Check if kubectl is installed
  ansible.builtin.stat:
    path: "{{ k3s_dev_environment_local_bin_path }}/kubectl"
  register: kubectl_stat

- name: Download and install kubectl {{ kubectl_version }}
  when: not kubectl_stat.stat.exists or ansible_check_mode # Always try in check mode
  block:
    - name: Download kubectl binary
      ansible.builtin.get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/kubectl"
        dest: "/tmp/kubectl-{{ kubectl_version }}"
        mode: '0755'
      register: kubectl_download
    - name: Move kubectl to {{ k3s_dev_environment_local_bin_path }}
      ansible.builtin.copy:
        src: "{{ kubectl_download.dest }}"
        dest: "{{ k3s_dev_environment_local_bin_path }}/kubectl"
        mode: '0755'
        remote_src: true
      when: kubectl_download is successful and kubectl_download.changed
    - name: Clean up kubectl download
      ansible.builtin.file:
        path: "{{ kubectl_download.dest }}"
        state: absent
      when: kubectl_download.dest is defined

- name: Check if helm is installed
  ansible.builtin.stat:
    path: "{{ k3s_dev_environment_local_bin_path }}/helm"
  register: helm_stat

- name: Download and install Helm {{ helm_version }}
  when: not helm_stat.stat.exists or ansible_check_mode
  block:
    - name: Download Helm archive
      ansible.builtin.get_url:
        url: "https://get.helm.sh/helm-{{ helm_version }}-linux-amd64.tar.gz"
        dest: "/tmp/helm-{{ helm_version }}-linux-amd64.tar.gz"
        mode: '0644'
      register: helm_archive_download
    - name: Create temporary directory for Helm extraction
      ansible.builtin.file:
        path: "/tmp/helm-extract"
        state: directory
        mode: '0755'
      when: helm_archive_download is successful and helm_archive_download.changed
    - name: Extract Helm archive
      ansible.builtin.unarchive:
        src: "{{ helm_archive_download.dest }}"
        dest: "/tmp/helm-extract"
        remote_src: true
        extra_opts: [--strip-components=1] # Specific to helm tarball structure
      args:
        creates: "/tmp/helm-extract/helm" # Idempotency check
      when: helm_archive_download is successful and helm_archive_download.changed
      register: helm_extract_status
    - name: Move helm binary to {{ k3s_dev_environment_local_bin_path }}
      ansible.builtin.copy:
        src: "/tmp/helm-extract/helm"
        dest: "{{ k3s_dev_environment_local_bin_path }}/helm"
        mode: '0755'
        remote_src: true
      when: helm_extract_status is successful and helm_extract_status.changed
    - name: Clean up Helm downloads and extraction
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ helm_archive_download.dest }}"
        - "/tmp/helm-extract"
      when: item is defined and item != ""
